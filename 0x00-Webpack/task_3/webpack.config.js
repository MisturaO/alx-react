const path = require('path'); // used to specify the path for the output.
const HtmlWebpackPlugin = require("html-webpack-plugin"); //Plugin to authomatically generate html.
const { CleanWebpackPlugin } = require('clean-webpack-plugin'); // this cleans up the build folder before each build, ensuring that you have a fresh and up-to-date output directory with the latest build files.

/* Specifies custom names for the entry and output properties. */

module.exports = {
    mode: 'development',
    devtool: 'inline-source-map', // Creates a file that maps the bundled code back to the original source code, making it easier to debug and trace issues in the application.
    entry: {
        //Webpack custom multiple entry point files.
        body: {
          import: './modules/body/body.js',
          dependOn: 'shared', //This indicates that the dependency (in this case, the jQuery library) is shared among multiple entry points (header, body, and footer).
        },
        header: {
          import: './modules/header/header.js',
          dependOn: 'shared',
        },
        footer: {
          import: './modules/footer/footer.js',
          dependOn: 'shared',
        },
        shared: 'jquery', // This entry point is used to specify that the 'jquery' module is shared among the above entry points. It means that the jQuery library will be loaded and shared among the modules represented by the header, body, and footer entry points. This will ensure that jQuery is not duplicated in each entry point but is loaded only once and shared among them.
    },
    optimization: { // This  extracts common code shared among entry points into separate chunks ensuring that common code and dependencies are shared efficiently among entry points.
      splitChunks: {
        chunks: 'all',
      },
    },
    output: {
        filename: '[name].bundle.js', //custom output file that will be generated by webpack, prefixed by the name of each entry point file name.
        path: path.resolve(__dirname, 'public') //The output file will be stored in the 'modules' folder.
    },
    performance: { // This tells Webpack not to display performance hints or warnings during the build process
        hints: false,
    },
    module: {
        rules: [
            {
                test: /\.css$/,
                use: ["style-loader", "css-loader"]
            },
            {
                test: /\.(gif|png|jpe?g|svg)$/i,
                use: [
                  'file-loader',
                  {
                    loader: 'image-webpack-loader',
                    options: {
                      bypassOnDebug: true, // webpack@1.x
                      disable: true, // webpack@2.x and newer
                      mozjpeg: {
                        progressive: true,
                      },
                    },
                  },
                ],
              }
        ]
    },
    //Modifies the Webpack config to setup a development server running on the port 8564. 
    //After installig webpack-dev-server.
    devServer: {
      static: path.join(__dirname, 'public'),
      compress: true,
      port: 8564,
    },
    plugins: [
      new HtmlWebpackPlugin({
        title: "task_3",
      }),
      new CleanWebpackPlugin(),
    ],
};
